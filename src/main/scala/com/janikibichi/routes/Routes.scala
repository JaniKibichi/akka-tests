package com.janikibichi.routes

import akka.http.scaladsl.model.{ContentTypes, HttpEntity, HttpResponse, StatusCodes}
import akka.http.scaladsl.server
import akka.http.scaladsl.server.Directives._
import akka.http.scaladsl.server.Route
import com.janikibichi.repository.DonutDao
import com.janikibichi.repository.Messages.{AkkaHttpRestServer, Donut, Ingredient}
import com.janikibichi.routes.marshalling.WebJSONSupport
import com.typesafe.scalalogging.LazyLogging

import scala.util.{Failure, Success}

trait Routes extends LazyLogging with WebJSONSupport{
  val routes: Route = home ~ termsAndConditions ~ serverVersion ~ routeAsJson ~ routeAsJsonEncoding ~ createDonut ~
                      listDonuts ~ listOrFailDonuts ~ donutListWithTryHttpResponse ~ userProvidedDonutName ~
                      checkDonutThroughRegex ~ passQueryParameters ~ optionalParameters ~ typedQueryParameters ~
                      csvQueryParameters ~ ingredientsToCaseClass ~ inspectRequestHeaders ~ multipleSegments

  def home:server.Route ={
    path(""){
      get {
        complete("Akka HTTP Server is UP.")
      }
    }
  }

  def termsAndConditions:server.Route ={
    path("termsAndConditions"){
      get{

        val privacyPolicy = "Privacy Policy" +
          "Your privacy is important to us. It is ubuntucellular.com's policy to respect your privacy regarding any information we may collect from you across our website, http://ubuntucellular.com, and other sites we own and operate." +
          "We only ask for personal information when we truly need it to provide a service to you. We collect it by fair and lawful means, with your knowledge and consent. We also let you know why we’re collecting it and how it will be used. " +
          "We only retain collected information for as long as necessary to provide you with your requested service. " +
          "What data we store, we’ll protect within commercially acceptable means to prevent loss and theft, as well as unauthorised access, disclosure, copying, use or modification." +
          "We don’t share any personally identifying information publicly or with third-parties, except when required to by law." +
          "Our website may link to external sites that are not operated by us. Please be aware that we have no control over the content and practices of these sites, and cannot accept responsibility or liability for their respective privacy policies." +
          "You are free to refuse our request for your personal information, with the understanding that we may be unable to provide you with some of your desired services." +
          "Your continued use of our website will be regarded as acceptance of our practices around privacy and personal information. " +
          "If you have any questions about how we handle user data and personal information, feel free to contact us." +
          "This policy is effective as of 28 March 2019." +
          "Generated by https://getterms.io/"

        complete(privacyPolicy)
      }
    }
  }

  def serverVersion:server.Route ={
    path("server-version") {
      get {
        val serverVersion = "1.0.0.0"
        complete(HttpEntity(ContentTypes.`text/plain(UTF-8)`, serverVersion))
      }
    }
  }

  def routeAsJson:server.Route ={
    path("server-version-json"){
      get{
        val jsonResponse = """
                             |{
                             | "app": "Akka HTTP REST Server",
                             | "version": "1.0.0.0"
                             |}
                           """.stripMargin
        complete(HttpEntity(ContentTypes.`application/json`,jsonResponse))
      }
    }
  }

  def routeAsJsonEncoding: server.Route ={
    path("server-version-json-encoding"){
      get{
        val server = AkkaHttpRestServer("AKKA HTTP REST Server","1.0.0.0")
        complete(server)
      }
    }
  }

  def createDonut:server.Route ={
    path("create-donut") {

      post{
        entity(as[Donut]) { donut =>
          logger.info(s"Creating donut = $donut")
          complete(StatusCodes.Created,s"Created donut = $donut")
        }
      }~ delete {
        complete(StatusCodes.MethodNotAllowed, "The HTTP DELETE operation is not allowed for the create-donut path.")
      }

    }
  }

  def listDonuts:server.Route ={
    path("donuts"){
      get{
        onSuccess(DonutDao.fetchDonuts){ donuts =>
          complete(StatusCodes.OK,donuts)
        }
      }
    }
  }

  def listOrFailDonuts:server.Route ={
    path("donuts-with-future-success-failure"){
      get{
        onComplete(DonutDao.fetchDonuts){
          case Success(donuts) => complete(StatusCodes.OK,donuts)
          case Failure(exception) => complete(s"Failed to fetch donuts = {${exception.getMessage}}")
        }
      }
    }
  }

  def completeWithHttpResponse:server.Route ={
    path("complete-with-http-response"){
      get{
        complete(HttpResponse(status = StatusCodes.OK,entity = "Response Entity Object"))
      }
    }
  }

  def donutListWithTryHttpResponse:server.Route={
    path("donut-with-try-http-response"){
      get{
        val result: HttpResponse = DonutDao.tryFetchDonuts.getOrElse(DonutDao.defaultResponse)
        complete(result)
      }
    }
  }

  def serveErrorPage:server.Route ={
    path("akka-http-get-resource"){
      getFromResource("error-page.html")
    }
  }

  def userProvidedDonutName:server.Route ={
    path("donuts"/Segment){ donutName =>
      get{
        val result = DonutDao.donutDetails(donutName)
        onComplete(result){
          case Success(donutDetail) => complete(StatusCodes.OK,donutDetail)
          case Failure(exception) => complete(s"Failed to fetch donut details = {${exception.getMessage}}")
        }
      }
    }
  }

  def checkDonutThroughRegex:server.Route ={
    path("donuts"/"stock"/new scala.util.matching.Regex("""donut_[a-zA-Z0-9\-]*""")) { donutId =>
      get{
        complete(StatusCodes.OK,s"Looking up donut stock by donutId =$donutId")
      }
    }
  }

  def passQueryParameters:server.Route={
    path("donut"/"prices"){
      get{
        parameter("donutName") { donutName =>
          val output = s"Received parameter: donutName=$donutName"
          complete(StatusCodes.OK, output)
        }
      }
    }
  }

  def optionalParameters:server.Route ={
    path("donut"/"bake"){
      get{
        parameters('donutName, 'topping ? "sprinkles"){ (donutName,topping) =>
          val output = s"Received parameters: donutName=$donutName and topping=$topping"
          complete(StatusCodes.OK,output)
        }
      }
    }
  }

  def typedQueryParameters:server.Route ={
    path("ingredients"){
      get{
        parameters('donutName.as[String],'priceLevel.as[Double]){ (donutName, priceLevel) =>
          val output = s"Received parameters: donutName=$donutName, priceLevel=$priceLevel"
          complete(StatusCodes.OK,output)
        }
      }
    }
  }

  def csvQueryParameters:server.Route ={
    path("bake-donuts"){
      get{
        import akka.http.scaladsl.unmarshalling.PredefinedFromStringUnmarshallers.CsvSeq
        parameter('ingredients.as(CsvSeq[String])){ ingredients =>
          val output = s"Received CSV parameter: ingredients=$ingredients"
          complete(StatusCodes.OK, output)
        }
      }
    }
  }

  def ingredientsToCaseClass:server.Route={
    path("ingredients-to-case-class"){
      get{
        parameters('donutName.as[String],'priceLevel.as[Double]).as(Ingredient){ ingredients =>
          val output = s"Encoded query parameters into case class, ingredient: $ingredients"
          complete(StatusCodes.OK,output)

        }
      }
    }
  }

  def inspectRequestHeaders:server.Route={
    path("request-with-headers"){
      get{
        extractRequest{ httpRequest =>
          val headers = httpRequest.headers.mkString(", ")
          complete(StatusCodes.OK,s"headers = $headers")
        }
      }
    }
  }

  def multipleSegments:server.Route={
    path("multiple-segments"/Segments){ segments =>
      get{
        val partA :: partB :: partC :: Nil = segments
        val output =
          s"""
            |Received the following Segments=$segments, with
            |partA = $partA
            |partB = $partB
            |partC = $partC
          """.stripMargin
        complete(StatusCodes.OK,output)
      }
    }
  }

}